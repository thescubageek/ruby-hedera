---
openapi: 3.0.3
info:
  title: Hedera Mirror Node REST API
  version: 0.113.3
  license:
    name: Apache-2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  description: |-
    The Mirror Node REST API offers the ability to query cryptocurrency transactions and account information from a Hedera managed mirror node.

    Base url: [/api/v1](/api/v1)

    OpenAPI Spec: [/api/v1/docs/openapi.yml](/api/v1/docs/openapi.yml)
  contact:
    name: Hedera Mirror Node Team
    email: mirrornode@hedera.com
    url: https://github.com/hashgraph/hedera-mirror-node
paths:
  "/api/v1/accounts/{idOrAliasOrEvmAddress}":
    get:
      summary: Get account by alias, id, or evm address
      description: |
        Return the account transactions and balance information given an account alias, an account id, or an evm address. The information will be limited to at most 1000 token balances for the account as outlined in HIP-367.
        When the timestamp parameter is supplied, we will return transactions and account state for the relevant timestamp query. Balance information will be accurate to within 15 minutes of the provided timestamp query.
        Historical ethereum nonce information is currently not available and may not be the exact value at a provided timestamp.
      operationId: getAccount
      parameters:
      - "$ref": "#/components/parameters/accountIdOrAliasOrEvmAddressPathParam"
      - "$ref": "#/components/parameters/limitQueryParam"
      - "$ref": "#/components/parameters/orderQueryParamDesc"
      - "$ref": "#/components/parameters/timestampQueryParam"
      - "$ref": "#/components/parameters/transactionTypeQueryParam"
      - "$ref": "#/components/parameters/transactionsQueryParam"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AccountBalanceTransactions"
        400:
          "$ref": "#/components/responses/InvalidParameterError"
        404:
          "$ref": "#/components/responses/NotFoundError"
      tags:
      - accounts
  "/api/v1/accounts/{idOrAliasOrEvmAddress}/nfts":
    get:
      summary: Get nfts for an account info
      description: |
        Returns information for all non-fungible tokens for an account.

        ## Ordering
        When considering NFTs, their order is governed by a combination of their numerical **token.Id** and **serialnumber** values, with **token.id** being the parent column.
        A serialnumbers value governs its order within the given token.id

        In that regard, if a user acquired a set of NFTs in the order (2-2, 2-4 1-5, 1-1, 1-3, 3-3, 3-4), the following layouts illustrate the ordering expectations for ownership listing
        1. **All NFTs in ASC order**: 1-1, 1-3, 1-5, 2-2, 2-4, 3-3, 3-4
        2. **All NFTs in DESC order**: 3-4, 3-3, 2-4, 2-2, 1-5, 1-3, 1-1
        3. **NFTs above 1-1 in ASC order**: 1-3, 1-5, 2-2, 2-4, 3-3, 3-4
        4. **NFTs below 3-3 in ASC order**: 1-1, 1-3, 1-5, 2-2, 2-4
        5. **NFTs between 1-3 and 3-3 inclusive in DESC order**: 3-4, 3-3, 2-4, 2-2, 1-5, 1-3

        Note: The default order for this API is currently DESC

        ## Filtering
        When filtering there are some restrictions enforced to ensure correctness and scalability.

        **The table below defines the restrictions and support for the NFT ownership endpoint**

        | Query Param   | Comparison Operator | Support | Description           | Example |
        | ------------- | ------------------- | ------- | --------------------- | ------- |
        | token.id      | eq                  | Y       | Single occurrence only. | ?token.id=X |
        |               | ne                  | N       | | |
        |               | lt(e)               | Y       | Single occurrence only. | ?token.id=lte:X |
        |               | gt(e)               | Y       | Single occurrence only. | ?token.id=gte:X |
        | serialnumber  | eq                  | Y       | Single occurrence only. Requires the presence of a **token.id** query | ?serialnumber=Y |
        |               | ne                  | N       | | |
        |               | lt(e)               | Y       | Single occurrence only. Requires the presence of an **lte** or **eq** **token.id** query | ?token.id=lte:X&serialnumber=lt:Y |
        |               | gt(e)               | Y       | Single occurrence only. Requires the presence of an **gte** or **eq** **token.id** query | ?token.id=gte:X&serialnumber=gt:Y |
        | spender.id    | eq                  | Y       | | ?spender.id=Z |
        |               | ne                  | N       | | |
        |               | lt(e)               | Y       | | ?spender.id=lt:Z |
        |               | gt(e)               | Y       | | ?spender.id=gt:Z |

        Note: When searching across a range for individual NFTs a **serialnumber** with an additional **token.id** query filter must be provided.
        Both filters must be a single occurrence of **gt(e)** or **lt(e)** which provide a lower and or upper boundary for search.
      operationId: getNftsByAccountId
      parameters:
      - "$ref": "#/components/parameters/accountIdOrAliasOrEvmAddressPathParam"
      - "$ref": "#/components/parameters/limitQueryParam"
      - "$ref": "#/components/parameters/orderQueryParamDesc"
      - "$ref": "#/components/parameters/serialNumberQueryParam"
      - "$ref": "#/components/parameters/spenderIdQueryParam"
      - "$ref": "#/components/parameters/tokenIdQueryParam"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Nfts"
        400:
          "$ref": "#/components/responses/InvalidParameterError"
        404:
          "$ref": "#/components/responses/NotFoundError"
      tags:
      - accounts
  "/api/v1/accounts/{idOrAliasOrEvmAddress}/rewards":
    get:
      summary: Get past staking reward payouts for an account
      description: 'Returns information for all past staking reward payouts for an
        account.

        '
      operationId: getStakingRewards
      parameters:
      - "$ref": "#/components/parameters/accountIdOrAliasOrEvmAddressPathParam"
      - "$ref": "#/components/parameters/limitQueryParam"
      - "$ref": "#/components/parameters/orderQueryParamDesc"
      - "$ref": "#/components/parameters/timestampQueryParam"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/StakingRewardsResponse"
        400:
          "$ref": "#/components/responses/InvalidParameterError"
        404:
          "$ref": "#/components/responses/NotFoundError"
      tags:
      - accounts
  "/api/v1/accounts/{idOrAliasOrEvmAddress}/tokens":
    get:
      summary: Get token relationships info for an account
      description: 'Returns information for all token relationships for an account.

        '
      operationId: getTokensByAccountId
      parameters:
      - "$ref": "#/components/parameters/accountIdOrAliasOrEvmAddressPathParam"
      - "$ref": "#/components/parameters/limitQueryParam"
      - "$ref": "#/components/parameters/orderQueryParam"
      - "$ref": "#/components/parameters/tokenIdQueryParam"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TokenRelationshipResponse"
        400:
          "$ref": "#/components/responses/InvalidParameterError"
        404:
          "$ref": "#/components/responses/NotFoundError"
      tags:
      - accounts
  "/api/v1/accounts/{idOrAliasOrEvmAddress}/allowances/crypto":
    get:
      summary: Get crypto allowances for an account info
      description: Returns information for all crypto allowances for an account.
      operationId: getCryptoAllowances
      parameters:
      - "$ref": "#/components/parameters/accountIdOrAliasOrEvmAddressPathParam"
      - "$ref": "#/components/parameters/limitQueryParam"
      - "$ref": "#/components/parameters/orderQueryParamDesc"
      - "$ref": "#/components/parameters/spenderIdQueryParam"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CryptoAllowancesResponse"
        400:
          "$ref": "#/components/responses/InvalidParameterError"
        404:
          "$ref": "#/components/responses/NotFoundError"
      tags:
      - accounts
  "/api/v1/accounts/{idOrAliasOrEvmAddress}/allowances/tokens":
    get:
      summary: Get fungible token allowances for an account
      description: |
        Returns information for fungible token allowances for an account.

        ## Ordering
        The order is governed by a combination of the spender id and the token id values, with spender id being the parent column.
        The token id value governs its order within the given spender id.

        Note: The default order for this API is currently ASC

        ## Filtering
        When filtering there are some restrictions enforced to ensure correctness and scalability.

        **The table below defines the restrictions and support for the endpoint**

        | Query Param   | Comparison Operator | Support | Description           | Example |
        | ------------- | ------------------- | ------- | --------------------- | ------- |
        | spender.id    | eq                  | Y       | Single occurrence only. | ?spender.id=X |
        |               | ne                  | N       | | |
        |               | lt(e)               | Y       | Single occurrence only. | ?spender.id=lte:X |
        |               | gt(e)               | Y       | Single occurrence only. | ?spender.id=gte:X |
        | token.id      | eq                  | Y       | Single occurrence only. Requires the presence of a **spender.id** query | ?token.id=lt:Y |
        |               | ne                  | N       | | |
        |               | lt(e)               | Y       | Single occurrence only. Requires the presence of an **lte** or **eq** **spender.id** query | ?spender.id=lte:X&token.id=lt:Y |
        |               | gt(e)               | Y       | Single occurrence only. Requires the presence of an **gte** or **eq** **spender.id** query | ?spender.id=gte:X&token.id=gt:Y |

        Both filters must be a single occurrence of **gt(e)** or **lt(e)** which provide a lower and or upper boundary for search.
      operationId: getTokenAllowances
      parameters:
      - "$ref": "#/components/parameters/accountIdOrAliasOrEvmAddressPathParam"
      - "$ref": "#/components/parameters/limitQueryParam"
      - "$ref": "#/components/parameters/orderQueryParam"
      - "$ref": "#/components/parameters/spenderIdQueryParam"
      - "$ref": "#/components/parameters/tokenIdQueryParam"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TokenAllowancesResponse"
        400:
          "$ref": "#/components/responses/InvalidParameterError"
        404:
          "$ref": "#/components/responses/NotFoundError"
      tags:
      - accounts
  "/api/v1/accounts/{idOrAliasOrEvmAddress}/allowances/nfts":
    get:
      summary: Get non fungible token allowances for an account
      description: |
        Returns an account's non-fungible token allowances.

        ## Ordering
        The order is governed by a combination of the account ID and the token ID values, with account ID being the parent column.
        The token ID value governs its order within the given account ID.

        Note: The default order for this API is currently ascending. The account ID can be the owner or the spender ID depending upon the owner flag.

        ## Filtering
        When filtering there are some restrictions enforced to ensure correctness and scalability.

        **The table below defines the restrictions and support for the endpoint**

        | Query Param   | Comparison Operator | Support | Description           | Example |
        | ------------- | ------------------- | ------- | --------------------- | ------- |
        | account.id    | eq                  | Y       | Single occurrence only. | ?account.id=X |
        |               | ne                  | N       | | |
        |               | lt(e)               | Y       | Single occurrence only. | ?account.id=lte:X |
        |               | gt(e)               | Y       | Single occurrence only. | ?account.id=gte:X |
        | token.id      | eq                  | Y       | Single occurrence only. Requires the presence of an **account.id** parameter | ?account.id=X&token.id=eq:Y |
        |               | ne                  | N       | | |
        |               | lt(e)               | Y       | Single occurrence only. Requires the presence of an **lte** or **eq** **account.id** parameter | ?account.id=lte:X&token.id=lt:Y |
        |               | gt(e)               | Y       | Single occurrence only. Requires the presence of an **gte** or **eq** **account.id** parameter | ?account.id=gte:X&token.id=gt:Y |

        Both filters must be a single occurrence of **gt(e)** or **lt(e)** which provide a lower and or upper boundary for search.
      operationId: getNftAllowances
      parameters:
      - "$ref": "#/components/parameters/accountIdOrAliasOrEvmAddressPathParam"
      - "$ref": "#/components/parameters/limitQueryParam"
      - "$ref": "#/components/parameters/orderQueryParam"
      - "$ref": "#/components/parameters/accountIdQueryParam"
      - "$ref": "#/components/parameters/tokenIdQueryParam"
      - "$ref": "#/components/parameters/ownerQueryParam"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/NftAllowancesResponse"
        400:
          "$ref": "#/components/responses/InvalidParameterError"
        404:
          "$ref": "#/components/responses/NotFoundError"
      tags:
      - accounts
components:
  schemas:
    CryptoAllowancesResponse:
      type: object
      properties:
        allowances:
          "$ref": "#/components/schemas/CryptoAllowances"
        links:
          "$ref": "#/components/schemas/Links"
    NftAllowancesResponse:
      type: object
      properties:
        allowances:
          "$ref": "#/components/schemas/NftAllowances"
        links:
          "$ref": "#/components/schemas/Links"
    StakingRewardsResponse:
      type: object
      properties:
        rewards:
          type: array
          items:
            "$ref": "#/components/schemas/StakingReward"
        links:
          "$ref": "#/components/schemas/Links"
    TokenAllowancesResponse:
      type: object
      properties:
        allowances:
          "$ref": "#/components/schemas/TokenAllowances"
        links:
          "$ref": "#/components/schemas/Links"
    TokenRelationshipResponse:
      type: object
      properties:
        tokens:
          type: array
          items:
            "$ref": "#/components/schemas/TokenRelationship"
        links:
          "$ref": "#/components/schemas/Links"
    AccountInfo:
      type: object
      required:
      - account
      - alias
      - auto_renew_period
      - balance
      - created_timestamp
      - decline_reward
      - deleted
      - ethereum_nonce
      - evm_address
      - expiry_timestamp
      - key
      - max_automatic_token_associations
      - memo
      - receiver_sig_required
      - staked_account_id
      - staked_node_id
      - stake_period_start
      properties:
        account:
          "$ref": "#/components/schemas/EntityId"
        alias:
          "$ref": "#/components/schemas/Alias"
        auto_renew_period:
          type: integer
          format: int64
          nullable: true
        balance:
          "$ref": "#/components/schemas/Balance"
        created_timestamp:
          "$ref": "#/components/schemas/TimestampNullable"
        decline_reward:
          description: Whether the account declines receiving a staking reward
          type: boolean
        deleted:
          type: boolean
          nullable: true
        ethereum_nonce:
          type: integer
          format: int64
          nullable: true
        evm_address:
          "$ref": "#/components/schemas/EvmAddressNullable"
        expiry_timestamp:
          "$ref": "#/components/schemas/TimestampNullable"
        key:
          "$ref": "#/components/schemas/Key"
        max_automatic_token_associations:
          type: integer
          format: int32
          nullable: true
        memo:
          type: string
          nullable: true
        pending_reward:
          description: |
            The pending reward in tinybars the account will receive in the next reward payout. Note the value is updated
            at the end of each staking period and there may be delay to reflect the changes in the past staking period.
          type: integer
          format: int64
        receiver_sig_required:
          nullable: true
          type: boolean
        staked_account_id:
          allOf:
          - "$ref": "#/components/schemas/EntityId"
          - description: The account to which this account is staking
        staked_node_id:
          description: The id of the node to which this account is staking
          type: integer
          format: int64
          nullable: true
        stake_period_start:
          allOf:
          - "$ref": "#/components/schemas/TimestampNullable"
          - description: |
              The staking period during which either the staking settings for this account changed (such as starting
              staking or changing stakedNode) or the most recent reward was earned, whichever is later. If this
              account is not currently staked to a node, then the value is null
      example:
        account: 0.0.8
        alias: HIQQEXWKW53RKN4W6XXC4Q232SYNZ3SZANVZZSUME5B5PRGXL663UAQA
        auto_renew_period:
        balance:
          timestamp: '0.000002345'
          balance: 80
          tokens:
          - token_id: 0.0.200001
            balance: 8
        created_timestamp: '1562591528.000123456'
        decline_reward: false
        deleted: false
        ethereum_nonce: 10
        evm_address: '0xac384c53f03855fa1b3616052f8ba32c6c2a2fec'
        expiry_timestamp:
        key:
        max_automatic_token_associations: 200
        memo: entity memo
        pending_reward: 100
        receiver_sig_required: false
        staked_account_id:
        staked_node_id: 3
        stake_period_start: '172800000.000000000'
    AccountBalanceTransactions:
      allOf:
      - "$ref": "#/components/schemas/AccountInfo"
      - type: object
        required:
        - transactions
        - links
        properties:
          transactions:
            "$ref": "#/components/schemas/Transactions"
          links:
            "$ref": "#/components/schemas/Links"
    Alias:
      description: RFC4648 no-padding base32 encoded account alias
      type: string
      pattern: "^(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8})$"
      nullable: true
      example: HIQQEXWKW53RKN4W6XXC4Q232SYNZ3SZANVZZSUME5B5PRGXL663UAQA
    Balance:
      type: object
      required:
      - timestamp
      - balance
      - tokens
      properties:
        timestamp:
          "$ref": "#/components/schemas/TimestampNullable"
        balance:
          format: int64
          nullable: true
          type: integer
        tokens:
          type: array
          items:
            type: object
            properties:
              token_id:
                "$ref": "#/components/schemas/EntityId"
              balance:
                format: int64
                type: integer
      nullable: true
      example:
        timestamp: '0.000002345'
        balance: 80
        tokens:
        - token_id: 0.0.200001
          balance: 8
    CryptoAllowances:
      type: array
      items:
        "$ref": "#/components/schemas/CryptoAllowance"
    EntityId:
      type: string
      description: Network entity ID in the format of `shard.realm.num`
      pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
      example: 0.0.2
      nullable: true
    EvmAddressNullable:
      type: string
      description: A network entity encoded as an EVM address in hex.
      format: binary
      minLength: 40
      maxLength: 42
      nullable: true
      pattern: "^(0x)?[A-Fa-f0-9]{40}$"
      example: '0x0000000000000000000000000000000000001f41'
    Key:
      description: The public key which controls access to various network entities.
      type: object
      nullable: true
      properties:
        _type:
          type: string
          enum:
          - ECDSA_SECP256K1
          - ED25519
          - ProtobufEncoded
          example: ProtobufEncoded
        key:
          type: string
          example: 421050820e1485acdd59726088e0e4a2130ebbbb70009f640ad95c78dd5a7b38
    Links:
      type: object
      properties:
        next:
          example:
          nullable: true
          type: string
    Nfts:
      type: object
      properties:
        nfts:
          type: array
          items:
            "$ref": "#/components/schemas/Nft"
        links:
          "$ref": "#/components/schemas/Links"
    NftAllowances:
      type: array
      items:
        "$ref": "#/components/schemas/NftAllowance"
    TimestampNullable:
      description: A Unix timestamp in seconds.nanoseconds format
      type: string
      example: '1586567700.453054000'
      pattern: "^\\d{1,10}(\\.\\d{1,9})?$"
      nullable: true
    TokenAllowances:
      type: array
      items:
        "$ref": "#/components/schemas/TokenAllowance"
  responses:
    NotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/Error"
          example:
            _status:
              messages:
              - message: Not found
    InvalidParameterError:
      description: Invalid parameter
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/Error"
          example:
            _status:
              messages:
              - message: 'Invalid parameter: account.id'
              - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                  format where sss are seconds and nnn are nanoseconds
  parameters:
    accountIdOrAliasOrEvmAddressPathParam:
      name: idOrAliasOrEvmAddress
      in: path
      description: Account alias or account id or evm address
      required: true
      examples:
        aliasOnly:
          value: HIQQEXWKW53RKN4W6XXC4Q232SYNZ3SZANVZZSUME5B5PRGXL663UAQA
        realmAlias:
          value: 0.HIQQEXWKW53RKN4W6XXC4Q232SYNZ3SZANVZZSUME5B5PRGXL663UAQA
        shardRealmAlias:
          value: 0.1.HIQQEXWKW53RKN4W6XXC4Q232SYNZ3SZANVZZSUME5B5PRGXL663UAQA
        accountNumOnly:
          value: 8
        realmAccountNum:
          value: 0.8
        shardRealmAccountNum:
          value: 0.0.8
        evmAddress:
          value: ac384c53f03855fa1b3616052f8ba32c6c2a2fec
        evmAddressWithPrefix:
          value: 983201903409292612713400538130315269243293806572
        evmAddressWithShardAndRealm:
          value: 0.0.ac384c53f03855fa1b3616052f8ba32c6c2a2fec
      schema:
        pattern: "^(\\d{1,10}\\.){0,2}(\\d{1,10}|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))$"
        type: string
    accountIdQueryParam:
      name: account.id
      in: query
      description: The ID of the account to return information for
      explode: true
      examples:
        noValue:
          summary: "--"
          value: ''
        entityNumNoOperator:
          summary: Example of entityNum equals with no operator
          value: 100
        idNoOperator:
          summary: Example of id equals with no operator
          value: 0.0.100
        entityNumEqOperator:
          summary: Example of entityNum equals operator
          value: eq:200
        idEqOperator:
          summary: Example of id equals operator
          value: eq:0.0.200
        entityNumNeOperator:
          summary: Example of entityNum not equals operator
          value: ne:300
        idNeOperator:
          summary: Example of id not equals operator
          value: ne:0.0.300
        entityNumGtOperator:
          summary: Example of entityNum greater than operator
          value: gt:400
        idGtOperator:
          summary: Example of id greater than operator
          value: gt:0.0.400
        entityNumGteOperator:
          summary: Example of entityNum greater than or equals operator
          value: gte:500
        idGteOperator:
          summary: Example of id greater than or equals operator
          value: gte:0.0.500
        entityNumLtOperator:
          summary: Example of entityNum less than operator
          value: lt:600
        idLtOperator:
          summary: Example of id less than operator
          value: lt:0.0.600
        entityNumLteOperator:
          summary: Example of entityNum less than or equals operator
          value: lte:700
        idLteOperator:
          summary: Example of id less than or equals operator
          value: lte:0.0.700
      schema:
        "$ref": "#/components/schemas/EntityIdQuery"
    limitQueryParam:
      name: limit
      in: query
      description: The maximum number of items to return
      example: 2
      schema:
        format: int32
        type: integer
        default: 25
        minimum: 1
        maximum: 100
    orderQueryParam:
      name: order
      in: query
      description: The order in which items are listed
      example: desc
      schema:
        enum:
        - asc
        - desc
        default: asc
    orderQueryParamDesc:
      name: order
      in: query
      description: The order in which items are listed
      example: asc
      schema:
        enum:
        - asc
        - desc
        default: desc
    ownerQueryParam:
      name: owner
      description: When the owner value is true or omitted, the accountId path parameter
        will specify the ID of the owner, and the API will retrieve the allowances
        that the owner has granted to different spenders. Conversely, when the owner
        value is false, the accountId path parameter will indicate the ID of the spender
        who has an allowance, and the API will instead provide the allowances granted
        to the spender by different owners of those tokens.
      in: query
      example: true
      schema:
        type: boolean
        default: true
    serialNumberQueryParam:
      name: serialnumber
      in: query
      explode: true
      description: The nft serial number (64 bit type). Requires a tokenId value also
        be populated.
      examples:
        noValue:
          summary: "--"
          value: ''
        serialNumNoOperator:
          summary: Example of serialNum equals with no operator
          value: 100
        serialNumEqOperator:
          summary: Example of serialNum equals operator
          value: eq:200
        serialNumGtOperator:
          summary: Example of serialNum greater than operator
          value: gt:400
        serialNumGteOperator:
          summary: Example of serialNum greater than or equals operator
          value: gte:500
        serialNumLtOperator:
          summary: Example of serialNum less than operator
          value: lt:600
        serialNumLteOperator:
          summary: Example of serialNum less than or equals operator
          value: lte:700
      schema:
        type: string
        pattern: "^((eq|gt|gte|lt|lte):)?\\d{1,19}?$"
    timestampQueryParam:
      description: The consensus timestamp as a Unix timestamp in seconds.nanoseconds
        format with an optional comparison operator. See [unixtimestamp.com](https://www.unixtimestamp.com/)
        for a simple way to convert a date to the 'seconds' part of the Unix time.
      name: timestamp
      in: query
      explode: true
      examples:
        noValue:
          summary: "--"
          value: ''
        secondsNoOperator:
          summary: Example of seconds equals with no operator
          value: 1234567890
        timestampNoOperator:
          summary: Example of timestamp equals with no operator
          value: 1234567890.0
        secondsEqOperator:
          summary: Example of seconds equals with operator
          value: eq:1234567890
        timestampEqOperator:
          summary: Example of timestamp equals with operator
          value: eq:1234567890.000000200
        secondsNeOperator:
          summary: Example of seconds not equals operator
          value: ne:1234567890
        timestampNeOperator:
          summary: Example of timestamp not equals operator
          value: ne:1234567890.000000300
        secondsGtOperator:
          summary: Example of seconds greater than operator
          value: gt:1234567890
        timestampGtOperator:
          summary: Example of timestamp greater than operator
          value: gt:1234567890.000000400
        secondsGteOperator:
          summary: Example of seconds greater than or equals operator
          value: gte:1234567890
        timestampGteOperator:
          summary: Example of timestamp greater than or equals operator
          value: gte:1234567890.000000500
        secondsLtOperator:
          summary: Example of seconds less than operator
          value: lt:1234567890
        timestampLtOperator:
          summary: Example of timestamp less than operator
          value: lt:1234567890.000000600
        secondsLteOperator:
          summary: Example of seconds less than or equals operator
          value: lte:1234567890
        timestampLteOperator:
          summary: Example of timestamp less than or equals operator
          value: lte:1234567890.000000700
      schema:
        type: array
        items:
          type: string
          pattern: "^((eq|gt|gte|lt|lte|ne):)?\\d{1,10}(.\\d{1,9})?$"
    spenderIdQueryParam:
      name: spender.id
      description: The ID of the spender to return information for
      in: query
      examples:
        noValue:
          summary: "--"
          value: ''
        entityNumNoOperator:
          summary: Example of entityNum equals with no operator
          value: 100
        idNoOperator:
          summary: Example of id equals with no operator
          value: 0.0.100
        entityNumEqOperator:
          summary: Example of entityNum equals operator
          value: eq:200
        idEqOperator:
          summary: Example of id equals operator
          value: eq:0.0.200
        idGtOperator:
          summary: Example of id greather than operator
          value: gt:0.0.200
        idGteOperator:
          summary: Example of id greather than or equal to operator
          value: gte:0.0.200
        idLtOperator:
          summary: Example of id less than operator
          value: lt:0.0.200
        idLteOperator:
          summary: Example of id less than or equal to operator
          value: lte:0.0.200
      schema:
        "$ref": "#/components/schemas/EntityIdQuery"
    transactionsQueryParam:
      name: transactions
      description: If provided and set to false transactions will not be included
        in the response
      in: query
      example: true
      schema:
        type: boolean
        default: true
    transactionTypeQueryParam:
      name: transactiontype
      in: query
      example: cryptotransfer
      schema:
        "$ref": "#/components/schemas/TransactionTypes"
    tokenIdQueryParam:
      name: token.id
      description: The ID of the token to return information for
      in: query
      examples:
        noValue:
          summary: "--"
          value: ''
        entityNumNoOperator:
          summary: Example of entityNum equals with no operator
          value: 100
        idNoOperator:
          summary: Example of id equals with no operator
          value: 0.0.100
        entityNumEqOperator:
          summary: Example of entityNum equals operator
          value: eq:200
        idEqOperator:
          summary: Example of id equals operator
          value: eq:0.0.200
        entityNumNeOperator:
          summary: Example of entityNum not equals operator
          value: ne:300
        idNeOperator:
          summary: Example of id not equals operator
          value: ne:0.0.300
        entityNumGtOperator:
          summary: Example of entityNum greater than operator
          value: gt:400
        idGtOperator:
          summary: Example of id greater than operator
          value: gt:0.0.400
        entityNumGteOperator:
          summary: Example of entityNum greater than or equals operator
          value: gte:500
        idGteOperator:
          summary: Example of id greater than or equals operator
          value: gte:0.0.500
        entityNumLtOperator:
          summary: Example of entityNum less than operator
          value: lt:600
        idLtOperator:
          summary: Example of id less than operator
          value: lt:0.0.600
        entityNumLteOperator:
          summary: Example of entityNum less than or equals operator
          value: lte:700
        idLteOperator:
          summary: Example of id less than or equals operator
          value: lte:0.0.700
      schema:
        "$ref": "#/components/schemas/EntityIdQuery"
tags:
- name: accounts
  description: The accounts object represents the information associated with an account
    entity and returns a list of account information.The accounts list endpoint is
    cached and not updated as frequently as the account lookup by a specific ID endpoint.
  externalDocs:
    url: https://docs.hedera.com/guides/docs/mirror-node-api/cryptocurrency-api#accounts
servers:
- description: The current REST API server
  url: ''
- description: The production REST API servers
  url: "{scheme}://{network}.mirrornode.hedera.com"
  variables:
    scheme:
      default: https
      description: The URI scheme
      enum:
      - http
      - https
    network:
      default: testnet
      description: The Hedera network in use
      enum:
      - mainnet-public
      - mainnet
      - previewnet
      - testnet
