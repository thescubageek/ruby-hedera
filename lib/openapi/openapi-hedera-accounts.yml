---
openapi: 3.0.3
info:
  title: Hedera Mirror Node REST API
  version: 0.113.3
  license:
    name: Apache-2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  description: |-
    The Mirror Node REST API offers the ability to query cryptocurrency transactions and account information from a Hedera managed mirror node.

    Base url: [/api/v1](/api/v1)

    OpenAPI Spec: [/api/v1/docs/openapi.yml](/api/v1/docs/openapi.yml)
  contact:
    name: Hedera Mirror Node Team
    email: mirrornode@hedera.com
    url: https://github.com/hashgraph/hedera-mirror-node
paths:
  "/api/v1/accounts":
    get:
      summary: List account entities on network
      description: Returns a list of all account entity items on the network.
      operationId: getAccounts
      parameters:
      - "$ref": "#/components/parameters/accountBalanceQueryParam"
      - "$ref": "#/components/parameters/accountIdQueryParam"
      - "$ref": "#/components/parameters/accountPublicKeyQueryParam"
      - "$ref": "#/components/parameters/balanceQueryParam"
      - "$ref": "#/components/parameters/limitQueryParam"
      - "$ref": "#/components/parameters/orderQueryParam"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AccountsResponse"
        400:
          "$ref": "#/components/responses/InvalidParameterError"
      tags:
      - accounts
  "/api/v1/accounts/{idOrAliasOrEvmAddress}":
    get:
      summary: Get account by alias, id, or evm address
      description: |
        Return the account transactions and balance information given an account alias, an account id, or an evm address. The information will be limited to at most 1000 token balances for the account as outlined in HIP-367.
        When the timestamp parameter is supplied, we will return transactions and account state for the relevant timestamp query. Balance information will be accurate to within 15 minutes of the provided timestamp query.
        Historical ethereum nonce information is currently not available and may not be the exact value at a provided timestamp.
      operationId: getAccount
      parameters:
      - "$ref": "#/components/parameters/accountIdOrAliasOrEvmAddressPathParam"
      - "$ref": "#/components/parameters/limitQueryParam"
      - "$ref": "#/components/parameters/orderQueryParamDesc"
      - "$ref": "#/components/parameters/timestampQueryParam"
      - "$ref": "#/components/parameters/transactionTypeQueryParam"
      - "$ref": "#/components/parameters/transactionsQueryParam"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AccountBalanceTransactions"
        400:
          "$ref": "#/components/responses/InvalidParameterError"
        404:
          "$ref": "#/components/responses/NotFoundError"
      tags:
      - accounts
  "/api/v1/accounts/{idOrAliasOrEvmAddress}/nfts":
    get:
      summary: Get nfts for an account info
      description: |
        Returns information for all non-fungible tokens for an account.

        ## Ordering
        When considering NFTs, their order is governed by a combination of their numerical **token.Id** and **serialnumber** values, with **token.id** being the parent column.
        A serialnumbers value governs its order within the given token.id

        In that regard, if a user acquired a set of NFTs in the order (2-2, 2-4 1-5, 1-1, 1-3, 3-3, 3-4), the following layouts illustrate the ordering expectations for ownership listing
        1. **All NFTs in ASC order**: 1-1, 1-3, 1-5, 2-2, 2-4, 3-3, 3-4
        2. **All NFTs in DESC order**: 3-4, 3-3, 2-4, 2-2, 1-5, 1-3, 1-1
        3. **NFTs above 1-1 in ASC order**: 1-3, 1-5, 2-2, 2-4, 3-3, 3-4
        4. **NFTs below 3-3 in ASC order**: 1-1, 1-3, 1-5, 2-2, 2-4
        5. **NFTs between 1-3 and 3-3 inclusive in DESC order**: 3-4, 3-3, 2-4, 2-2, 1-5, 1-3

        Note: The default order for this API is currently DESC

        ## Filtering
        When filtering there are some restrictions enforced to ensure correctness and scalability.

        **The table below defines the restrictions and support for the NFT ownership endpoint**

        | Query Param   | Comparison Operator | Support | Description           | Example |
        | ------------- | ------------------- | ------- | --------------------- | ------- |
        | token.id      | eq                  | Y       | Single occurrence only. | ?token.id=X |
        |               | ne                  | N       | | |
        |               | lt(e)               | Y       | Single occurrence only. | ?token.id=lte:X |
        |               | gt(e)               | Y       | Single occurrence only. | ?token.id=gte:X |
        | serialnumber  | eq                  | Y       | Single occurrence only. Requires the presence of a **token.id** query | ?serialnumber=Y |
        |               | ne                  | N       | | |
        |               | lt(e)               | Y       | Single occurrence only. Requires the presence of an **lte** or **eq** **token.id** query | ?token.id=lte:X&serialnumber=lt:Y |
        |               | gt(e)               | Y       | Single occurrence only. Requires the presence of an **gte** or **eq** **token.id** query | ?token.id=gte:X&serialnumber=gt:Y |
        | spender.id    | eq                  | Y       | | ?spender.id=Z |
        |               | ne                  | N       | | |
        |               | lt(e)               | Y       | | ?spender.id=lt:Z |
        |               | gt(e)               | Y       | | ?spender.id=gt:Z |

        Note: When searching across a range for individual NFTs a **serialnumber** with an additional **token.id** query filter must be provided.
        Both filters must be a single occurrence of **gt(e)** or **lt(e)** which provide a lower and or upper boundary for search.
      operationId: getNftsByAccountId
      parameters:
      - "$ref": "#/components/parameters/accountIdOrAliasOrEvmAddressPathParam"
      - "$ref": "#/components/parameters/limitQueryParam"
      - "$ref": "#/components/parameters/orderQueryParamDesc"
      - "$ref": "#/components/parameters/serialNumberQueryParam"
      - "$ref": "#/components/parameters/spenderIdQueryParam"
      - "$ref": "#/components/parameters/tokenIdQueryParam"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Nfts"
        400:
          "$ref": "#/components/responses/InvalidParameterError"
        404:
          "$ref": "#/components/responses/NotFoundError"
      tags:
      - accounts
  "/api/v1/accounts/{idOrAliasOrEvmAddress}/rewards":
    get:
      summary: Get past staking reward payouts for an account
      description: 'Returns information for all past staking reward payouts for an
        account.

        '
      operationId: getStakingRewards
      parameters:
      - "$ref": "#/components/parameters/accountIdOrAliasOrEvmAddressPathParam"
      - "$ref": "#/components/parameters/limitQueryParam"
      - "$ref": "#/components/parameters/orderQueryParamDesc"
      - "$ref": "#/components/parameters/timestampQueryParam"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/StakingRewardsResponse"
        400:
          "$ref": "#/components/responses/InvalidParameterError"
        404:
          "$ref": "#/components/responses/NotFoundError"
      tags:
      - accounts
  "/api/v1/accounts/{idOrAliasOrEvmAddress}/tokens":
    get:
      summary: Get token relationships info for an account
      description: 'Returns information for all token relationships for an account.

        '
      operationId: getTokensByAccountId
      parameters:
      - "$ref": "#/components/parameters/accountIdOrAliasOrEvmAddressPathParam"
      - "$ref": "#/components/parameters/limitQueryParam"
      - "$ref": "#/components/parameters/orderQueryParam"
      - "$ref": "#/components/parameters/tokenIdQueryParam"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TokenRelationshipResponse"
        400:
          "$ref": "#/components/responses/InvalidParameterError"
        404:
          "$ref": "#/components/responses/NotFoundError"
      tags:
      - accounts
  "/api/v1/accounts/{idOrAliasOrEvmAddress}/allowances/crypto":
    get:
      summary: Get crypto allowances for an account info
      description: Returns information for all crypto allowances for an account.
      operationId: getCryptoAllowances
      parameters:
      - "$ref": "#/components/parameters/accountIdOrAliasOrEvmAddressPathParam"
      - "$ref": "#/components/parameters/limitQueryParam"
      - "$ref": "#/components/parameters/orderQueryParamDesc"
      - "$ref": "#/components/parameters/spenderIdQueryParam"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CryptoAllowancesResponse"
        400:
          "$ref": "#/components/responses/InvalidParameterError"
        404:
          "$ref": "#/components/responses/NotFoundError"
      tags:
      - accounts
  "/api/v1/accounts/{idOrAliasOrEvmAddress}/allowances/tokens":
    get:
      summary: Get fungible token allowances for an account
      description: |
        Returns information for fungible token allowances for an account.

        ## Ordering
        The order is governed by a combination of the spender id and the token id values, with spender id being the parent column.
        The token id value governs its order within the given spender id.

        Note: The default order for this API is currently ASC

        ## Filtering
        When filtering there are some restrictions enforced to ensure correctness and scalability.

        **The table below defines the restrictions and support for the endpoint**

        | Query Param   | Comparison Operator | Support | Description           | Example |
        | ------------- | ------------------- | ------- | --------------------- | ------- |
        | spender.id    | eq                  | Y       | Single occurrence only. | ?spender.id=X |
        |               | ne                  | N       | | |
        |               | lt(e)               | Y       | Single occurrence only. | ?spender.id=lte:X |
        |               | gt(e)               | Y       | Single occurrence only. | ?spender.id=gte:X |
        | token.id      | eq                  | Y       | Single occurrence only. Requires the presence of a **spender.id** query | ?token.id=lt:Y |
        |               | ne                  | N       | | |
        |               | lt(e)               | Y       | Single occurrence only. Requires the presence of an **lte** or **eq** **spender.id** query | ?spender.id=lte:X&token.id=lt:Y |
        |               | gt(e)               | Y       | Single occurrence only. Requires the presence of an **gte** or **eq** **spender.id** query | ?spender.id=gte:X&token.id=gt:Y |

        Both filters must be a single occurrence of **gt(e)** or **lt(e)** which provide a lower and or upper boundary for search.
      operationId: getTokenAllowances
      parameters:
      - "$ref": "#/components/parameters/accountIdOrAliasOrEvmAddressPathParam"
      - "$ref": "#/components/parameters/limitQueryParam"
      - "$ref": "#/components/parameters/orderQueryParam"
      - "$ref": "#/components/parameters/spenderIdQueryParam"
      - "$ref": "#/components/parameters/tokenIdQueryParam"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TokenAllowancesResponse"
        400:
          "$ref": "#/components/responses/InvalidParameterError"
        404:
          "$ref": "#/components/responses/NotFoundError"
      tags:
      - accounts
  "/api/v1/accounts/{idOrAliasOrEvmAddress}/allowances/nfts":
    get:
      summary: Get non fungible token allowances for an account
      description: |
        Returns an account's non-fungible token allowances.

        ## Ordering
        The order is governed by a combination of the account ID and the token ID values, with account ID being the parent column.
        The token ID value governs its order within the given account ID.

        Note: The default order for this API is currently ascending. The account ID can be the owner or the spender ID depending upon the owner flag.

        ## Filtering
        When filtering there are some restrictions enforced to ensure correctness and scalability.

        **The table below defines the restrictions and support for the endpoint**

        | Query Param   | Comparison Operator | Support | Description           | Example |
        | ------------- | ------------------- | ------- | --------------------- | ------- |
        | account.id    | eq                  | Y       | Single occurrence only. | ?account.id=X |
        |               | ne                  | N       | | |
        |               | lt(e)               | Y       | Single occurrence only. | ?account.id=lte:X |
        |               | gt(e)               | Y       | Single occurrence only. | ?account.id=gte:X |
        | token.id      | eq                  | Y       | Single occurrence only. Requires the presence of an **account.id** parameter | ?account.id=X&token.id=eq:Y |
        |               | ne                  | N       | | |
        |               | lt(e)               | Y       | Single occurrence only. Requires the presence of an **lte** or **eq** **account.id** parameter | ?account.id=lte:X&token.id=lt:Y |
        |               | gt(e)               | Y       | Single occurrence only. Requires the presence of an **gte** or **eq** **account.id** parameter | ?account.id=gte:X&token.id=gt:Y |

        Both filters must be a single occurrence of **gt(e)** or **lt(e)** which provide a lower and or upper boundary for search.
      operationId: getNftAllowances
      parameters:
      - "$ref": "#/components/parameters/accountIdOrAliasOrEvmAddressPathParam"
      - "$ref": "#/components/parameters/limitQueryParam"
      - "$ref": "#/components/parameters/orderQueryParam"
      - "$ref": "#/components/parameters/accountIdQueryParam"
      - "$ref": "#/components/parameters/tokenIdQueryParam"
      - "$ref": "#/components/parameters/ownerQueryParam"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/NftAllowancesResponse"
        400:
          "$ref": "#/components/responses/InvalidParameterError"
        404:
          "$ref": "#/components/responses/NotFoundError"
      tags:
      - accounts
tags:
- name: accounts
  description: The accounts object represents the information associated with an account
    entity and returns a list of account information.The accounts list endpoint is
    cached and not updated as frequently as the account lookup by a specific ID endpoint.
  externalDocs:
    url: https://docs.hedera.com/guides/docs/mirror-node-api/cryptocurrency-api#accounts
components:
  schemas:
    AccountsResponse:
      type: object
      required:
      - accounts
      - links
      properties:
        accounts:
          "$ref": "#/components/schemas/Accounts"
        links:
          "$ref": "#/components/schemas/Links"
    CryptoAllowancesResponse:
      type: object
      properties:
        allowances:
          "$ref": "#/components/schemas/CryptoAllowances"
        links:
          "$ref": "#/components/schemas/Links"
    NftAllowancesResponse:
      type: object
      properties:
        allowances:
          "$ref": "#/components/schemas/NftAllowances"
        links:
          "$ref": "#/components/schemas/Links"
    StakingRewardsResponse:
      type: object
      properties:
        rewards:
          type: array
          items:
            "$ref": "#/components/schemas/StakingReward"
        links:
          "$ref": "#/components/schemas/Links"
    TokenAllowancesResponse:
      type: object
      properties:
        allowances:
          "$ref": "#/components/schemas/TokenAllowances"
        links:
          "$ref": "#/components/schemas/Links"
    TokenRelationshipResponse:
      type: object
      properties:
        tokens:
          type: array
          items:
            "$ref": "#/components/schemas/TokenRelationship"
        links:
          "$ref": "#/components/schemas/Links"
    AccountBalanceTransactions:
      allOf:
      - "$ref": "#/components/schemas/AccountInfo"
      - type: object
        required:
        - transactions
        - links
        properties:
          transactions:
            "$ref": "#/components/schemas/Transactions"
          links:
            "$ref": "#/components/schemas/Links"
    Nfts:
      type: object
      properties:
        nfts:
          type: array
          items:
            "$ref": "#/components/schemas/Nft"
        links:
          "$ref": "#/components/schemas/Links"
